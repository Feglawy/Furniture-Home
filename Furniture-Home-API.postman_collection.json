{
	"info": {
		"_postman_id": "furniture-home-api-collection",
		"name": "Furniture Home API",
		"description": "Complete API collection for Furniture Home authentication and user management endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Signup",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"phone\": \"1234567890\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						},
						"description": "Register a new user account"
					},
					"response": []
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"john@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login with email and password to get JWT token"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract JWT token from response and set it as environment variable",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.token) {",
									"        pm.environment.set('jwt_token', responseJson.token);",
									"        console.log('JWT Token saved:', responseJson.token);",
									"    }",
									"    if (responseJson.user && responseJson.user.id) {",
									"        pm.environment.set('user_id', responseJson.user.id);",
									"        console.log('User ID saved:', responseJson.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "Logout user (client-side token removal)"
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"john@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password"
							]
						},
						"description": "Request password reset for a user account"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration, login, logout, and password reset"
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Get user profile information (requires authentication)"
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated John Doe\",\n    \"phone\": \"9876543210\",\n    \"location\": \"Cairo, Egypt\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Update user profile information (requires authentication)"
					},
					"response": []
				}
			],
			"description": "User management endpoints for profile operations"
		},
		{
			"name": "Test Scenarios",
			"item": [
				{
					"name": "Complete User Flow",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test@example.com\",\n    \"phone\": \"5551234567\",\n    \"password\": \"testpassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						},
						"description": "Test complete user registration flow"
					},
					"response": []
				},
				{
					"name": "Login with Test User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"testpassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login with test user credentials"
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract JWT token from response and set it as environment variable",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.token) {",
									"        pm.environment.set('jwt_token', responseJson.token);",
									"        console.log('JWT Token saved:', responseJson.token);",
									"    }",
									"    if (responseJson.user && responseJson.user.id) {",
									"        pm.environment.set('user_id', responseJson.user.id);",
									"        console.log('User ID saved:', responseJson.user.id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"response": []
				},
				{
					"name": "Test Invalid Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"wrong@email.com\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Test login with invalid credentials (should return 401)"
					},
					"response": []
				},
				{
					"name": "Test Protected Endpoint Without Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						},
						"description": "Test accessing protected endpoint without JWT token (should return 401)"
					},
					"response": []
				}
			],
			"description": "Test scenarios for various API behaviors"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
} 